#!/usr/bin/env python3
# -*- coding: utf-8 ; mode: python -*-

"""
a sample command line interface for ADC service
"""

import argparse
import sys
from adcclient import ADCClient
from getpass import getpass
from datetime import datetime


def cmd_help():
    print("""
  login
  logout
  whoami
  password [NEWPASSWORD]
  get-user-list
  get-user [USERNAME ...]
  get-q [NUMBER ...]
  put-a NUMBER FILENAME
  put-a-info NUMBER CPU_SEC MEM_BYTE [MISC_TEXT]
  get-a-info [NUMBER]
  delete-a-info NUMBER
  get-a [NUMBER ...]          # test mode only, when NUMBER specified
  delete-a [NUMBER ...]       # test mode only
  get-user-q [NUMBER ...]
  post-user-q NUMBER FILENAME
  put-user-q NUMBER FILENAME
  delete-user-q [NUMBER ...]
  check-q FILENAME
  put-user-alive MSG
  get-user-log [NUMBER (seconds|days)]
  delete-user-log [NUMBER (seconds|days)]
  score
  score-dump
  get-root
admin command:
  create-user USERNAME PASSWORD DISPLAYNAME UID GID
  create-users FILENAME
  delete-user [USERNAME ...]
  get-admin-q-all
  get-admin-q-list
  put-admin-q-list
  delete-admin-q-list
  delete-admin-q-all
  get-admin-a-all
  delete-admin-a-all
  get-log [NUMBER (seconds|days)]
  delete-log [NUMBER (seconds|days)]
  timekeeper-enabled [0|1]
  timekeeper-state [init|im0|Qup|im1|Aup|im2]
  timekeeper [[0|1] [init|im0|Qup|im1|Aup|im2]]
  test-mode [True|False]
""")


def main():
    def output():
        if cli.output_file is None:
            ff = sys.stdout
        else:
            ff = open(cli.output_file, 'w')
        if len(args.arg) == 0:
            ff.write(resx[6]['msg'] + '\n')
        else:
            for res1 in resx:
                ff.write(res1[6]['text'] + '\n')
        if cli.output_file is not None:
            ff.close()

    #
    cli = ADCClient()
    cli.read_config()

    parser = argparse.ArgumentParser(
        description='DA Symposium 2019 Algorithm Design Contest, Command Line Interface tool')
    parser.add_argument('--debug', action='store_true', help='enable debug mode')
    parser.add_argument('--verbose', action='store_true', help='verbose message')
    parser.add_argument('-c', '--config', metavar='FILE', default=cli.config, help='config file (default: %(default)s)')
    parser.add_argument('-u', '--username', default=cli.username, help='set username (default: %(default)s)')
    parser.add_argument('--alt-username', help='set alternative username. admin only')
    parser.add_argument('-p', '--password', help='set password')
    parser.add_argument('-U', '--URL', default=cli.url, help='set server URL (default: %(default)s)')
    parser.add_argument('-o', '--output', metavar='FILE', default=cli.output_file,
                        help='output file name (default: %(default)s)')
    parser.add_argument('cmd', nargs=1, help='"adccli help" will show help of cmd.')
    parser.add_argument('arg', nargs='*')

    args = parser.parse_args()
    # print(args); #sys.exit(1)
    cli.debug = args.debug
    cli.verbose = args.verbose
    cli.config = args.config
    cli.read_config()
    cli.output_file = args.output
    cli.username = args.username
    cli.alt_username = args.alt_username
    if args.password:
        cli.password = args.password
    if args.URL:
        cli.url = args.URL

    a = args.cmd[0]
    if a == 'help':
        cmd_help()
        sys.exit(1)
    elif a == 'login':
        if cli.password is None:
            cli.password = getpass()
        res = cli.login()
        print(res[6]['msg'])
        if 'token' in res[6]:
            print(res[6]['token'])
    elif a == 'logout':
        res = cli.logout()
        print(res[6]['msg'])
    elif a == 'whoami':
        res = cli.whoami()
        print(res[6]['msg'])
    elif a == 'password':
        newpassword = None
        if cli.password is None:
            cli.password = getpass()
        if 1 < len(args.arg):
            newpassword = args.arg[0]
        else:
            newpassword1 = getpass('New Password: ')
            newpassword2 = getpass('New Password again: ')
            if newpassword1 == newpassword2:
                newpassword = newpassword1
            else:
                print('password mismatch. not changed')
        if newpassword is not None:
            res = cli.change_password(newpassword)
            print(res[6]['msg'])
    elif a == 'get-user-list':
        res = cli.get_user_list()
        # print(res[6])
        for u in res[6]:
            print(u)
    elif a == 'get-user':
        res2 = cli.get_user_info(args.arg)
        for res in res2:
            print(res[6]['msg'])
    elif a == 'create-user':
        res = cli.create_user(args.arg)
        print(res[6]['msg'])
    elif a == 'create-users':
        res2 = cli.create_users(args.arg[0])
        for res in res2:
            print(res[6]['msg'])
    elif a == 'delete-user':
        res2 = cli.delete_users(args.arg)
        for res in res2:
            print(res[6]['msg'])
    elif a == 'get-q':
        if len(args.arg) == 0:
            res = cli.get_q(args.arg)
            info = res[6]
            # print('info', info)
            if len(info['qnum_list']) == 0:
                print(info['msg'])
            else:
                for i, qnum in enumerate(info['qnum_list']):
                    print('Q%d SIZE %dX%d BLOCK_NUM %d #lines %d'
                          % (qnum,
                             info['cols_list'][i],
                             info['rows_list'][i],
                             info['blocknum_list'][i],
                             info['linenum_list'][i]))
        else:
            # Q番号を指定している場合
            resx = cli.get_q(args.arg)
            output()
    elif a == 'get-a':
        resx = cli.get_a(args.arg)
        # print('resx=', resx)
        for res1 in resx:
            print(res1[6]['msg'])
            if 'text' in res1:
                output()
    elif a == 'delete-a':
        for i in args.arg:
            res = cli.delete_a(int(i))
            print(res[6]['msg'])
    elif a == 'put-a':
        res = cli.put_a(args.arg)
        # print(res)
        print(res[6]['msg'])
    elif a == 'put-a-info':
        res = cli.put_a_info(args.arg)
        print(res[6]['msg'])
    elif a == 'get-a-info':
        res = cli.get_or_delete_a_info(args.arg, delete=False)
        # print('res=', res)
        # res= [11, 200, 'OK', 'application/json', None,
        #       b'{"msg": "GET", "results": {"16": null}}',
        #       {'msg': 'GET', 'results': {'16': None}}
        #      ]
        print(res[6].get('results'))

    elif a == 'delete-a-info':
        res = cli.get_or_delete_a_info(args.arg, delete=True)
        print(res[6]['msg'])
        print(res[6].get('results'))
    elif a == 'get-user-q':
        if len(args.arg) == 0:
            res = cli.get_user_q_list()
            # print(res)
            for i in res:
                size = 'SIZE %dX%d' % (i['cols'], i['rows'])
                block_num = 'BLOCK_NUM %d' % i['blocknum']
                line_num = 'LINE_NUM %d' % i['linenum']
                date = datetime.fromtimestamp(i['date'] / 1e6).strftime('%c')
                q = 'Q%d' % i['qnum']
                tmp = '"%s" "%s" "%s" "%s" "%s" "%s"' % (q, size, block_num, line_num, date, i['filename'])
                print(tmp)
        else:
            for i in args.arg:
                q_num = int(i)
                res = cli.get_user_q(q_num)
                # print('res=', res)
                # print(res[6]['text'], end='')
                filename = 'Q%d.%s.txt' % (q_num, cli.effective_username())
                with open(filename, 'wb') as f:
                    f.write(res[6]['text'].encode('utf-8'))
                print('Write file', filename)
    elif a == 'post-user-q':
        q_num = int(args.arg[0])
        q_file = args.arg[1]
        res = cli.post_user_q(q_num, q_file)
        print(res[6]['msg'])
    elif a == 'put-user-q':
        q_num = int(args.arg[0])
        q_file = args.arg[1]
        res = cli.put_user_q(q_num, q_file)
        print(res[6]['msg'])
    elif a == 'delete-user-q':
        for i in args.arg:
            res = cli.delete_user_q(int(i))
            print(res[6]['msg'])
    elif a == 'check-q':
        for file in args.arg:
            print('file=', file)
            res = cli.check_q(file)
            print(res[6]['check_file'])
    elif a == 'get-admin-q-all':
        res = cli.get_admin_q_all()
        print(res[6]['msg'])
    elif a == 'get-admin-a-all':
        res = cli.get_admin_a_all()
        print(res[6]['msg'])
    elif a == 'delete-admin-a-all':
        res = cli.delete_admin_a_all()
        print(res[6]['msg'])
    elif a == 'get-admin-q-list':
        res = cli.get_admin_q_list()
        # print(res[6]['msg'])
        # print(res[6])
        info = res[6]
        if len(info['qnum_list']) == 0:
            print(info['msg'])
        else:
            for i, qnum in enumerate(info['qnum_list']):
                print('Q%d %s %d SIZE %dX%d BLOCK_NUM %d #lines %d'
                      % (qnum,
                         info['author_list'][i],
                         info['author_qnum_list'][i],
                         info['cols_list'][i],
                         info['rows_list'][i],
                         info['blocknum_list'][i],
                         info['linenum_list'][i]))
    elif a == 'put-admin-q-list':
        res = cli.put_admin_q_list()
        print(res[6]['msg'])
    elif a == 'delete-admin-q-list':
        res = cli.delete_admin_q_list()
        print(res[6]['msg'])
    elif a == 'delete-admin-q-all':
        res = cli.delete_admin_q_all()
        print(res[6]['msg'])
    elif a == 'put-user-alive':
        res = cli.put_user_alive(args.arg)
        print(res[6]['msg'])
        if cli.verbose:
            print('alive:', res[6]['alive'])
    elif a == 'get-root':
        res = cli.get_root()
        print(res[6]['msg'])
    elif a in ('get-log', 'get-user-log', 'delete-log', 'delete-user-log'):
        res = cli.get_or_delete_log(args.arg, a)
        delete = (a.split('-')[0] == 'delete')
        # print res[6]['msg']
        if 'results' in res[6]:
            for i in res[6]['results']:
                if delete:
                    print('%s' % (i['date']))
                else:
                    print('%s %s: %s' % (i['date'], i['username'], i['what']))
    elif a == 'score':
        res = cli.score(args.arg)
        print(res[6])
    elif a == 'score-dump':
        res = cli.score_dump(args.arg)
        print(res[6])
    elif a == 'timekeeper-enabled':
        res = cli.timekeeper_enabled(args.arg)
        print(res[6])
    elif a == 'timekeeper-state':
        res = cli.timekeeper_state(args.arg)
        print(res[6])
    elif a == 'timekeeper':
        res = cli.timekeeper(args.arg)
        print(res[6])
    elif a == 'test-mode':
        res = cli.test_mode(args.arg)
        print(res[6])
    else:
        print('Error: Unknown command:', a)
    #
    cli.write_config()


if __name__ == "__main__":
    main()
